# Generated by Django 5.1.1 on 2025-06-01 14:20

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DefaultSystemPrompts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('prompt_text', models.TextField()),
                ('category', models.CharField(choices=[('balanced', 'Bilanciato'), ('precision', 'Alta Precisione'), ('speed', 'Velocità'), ('creative', 'Creativo'), ('technical', 'Tecnico'), ('custom', 'Personalizzato')], default='balanced', max_length=50)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Prompt di Sistema Predefinito',
                'verbose_name_plural': 'Prompt di Sistema Predefiniti',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LLMProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('api_url', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='llm_logos/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Provider LLM',
                'verbose_name_plural': 'Provider LLM',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Profile_type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('price_monthly', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_yearly', models.DecimalField(decimal_places=2, max_digits=10)),
                ('storage_limit_mb', models.IntegerField(help_text='Limite di archiviazione in MB')),
                ('max_files', models.IntegerField(help_text='Numero massimo di file')),
                ('monthly_rag_queries', models.IntegerField(help_text='Numero di query RAG mensili incluse')),
                ('extra_storage_price_per_mb', models.DecimalField(decimal_places=4, max_digits=10)),
                ('extra_rag_query_price', models.DecimalField(decimal_places=4, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='GlobalEmbeddingCache',
            fields=[
                ('file_hash', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('file_type', models.CharField(max_length=20)),
                ('original_filename', models.CharField(max_length=255)),
                ('embedding_path', models.CharField(max_length=500)),
                ('chunk_size', models.IntegerField(default=500)),
                ('chunk_overlap', models.IntegerField(default=50)),
                ('embedding_model', models.CharField(default='OpenAIEmbeddings', max_length=50)),
                ('processed_at', models.DateTimeField(auto_now=True)),
                ('file_size', models.BigIntegerField()),
                ('usage_count', models.IntegerField(default=1)),
            ],
            options={
                'indexes': [models.Index(fields=['file_hash'], name='profiles_gl_file_ha_af2912_idx')],
            },
        ),
        migrations.CreateModel(
            name='LLMEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_id', models.CharField(help_text='Identificativo del modello usato nelle API', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('default_temperature', models.FloatField(default=0.7)),
                ('default_max_tokens', models.IntegerField(default=4096)),
                ('default_timeout', models.IntegerField(default=60, help_text='Timeout in secondi')),
                ('supports_vision', models.BooleanField(default=False)),
                ('supports_functions', models.BooleanField(default=False)),
                ('context_window', models.IntegerField(default=8192)),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engines', to='profiles.llmprovider')),
            ],
            options={
                'verbose_name': 'Motore LLM',
                'verbose_name_plural': 'Motori LLM',
                'ordering': ['provider__name', 'name'],
                'unique_together': {('provider', 'model_id')},
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=240)),
                ('last_name', models.CharField(blank=True, max_length=240)),
                ('company_name', models.CharField(blank=True, max_length=240)),
                ('city', models.TextField(blank=True, max_length=1500)),
                ('address', models.CharField(blank=True, max_length=240)),
                ('postal_code', models.CharField(max_length=50, null=True)),
                ('province', models.CharField(max_length=200, null=True)),
                ('region', models.CharField(max_length=200, null=True)),
                ('country', models.CharField(blank=True, max_length=240)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('other_data', models.TextField(blank=True)),
                ('is_active', models.BooleanField(blank=True, default=True)),
                ('agreement_terms', models.BooleanField(default=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('profile_type', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='profiles.profile_type')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('chat_bot_api_key', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('is_public_chat_enabled', models.BooleanField(default=False)),
                ('allowed_domains', models.JSONField(blank=True, default=list)),
                ('chatwoot_enabled', models.BooleanField(default=False)),
                ('chatwoot_inbox_id', models.CharField(blank=True, max_length=50, null=True)),
                ('chatwoot_bot_id', models.CharField(blank=True, max_length=50, null=True)),
                ('chatwoot_metadata', models.JSONField(blank=True, default=dict, null=True)),
                ('chatwoot_widget_code', models.TextField(blank=True, help_text='Codice JavaScript del widget Chatwoot', null=True)),
                ('chatwoot_website_token', models.CharField(blank=True, help_text='Token del website Chatwoot', max_length=255, null=True)),
                ('chatbot_language', models.CharField(choices=[('it', 'Italiano'), ('en', 'English'), ('es', 'Español'), ('fr', 'Français'), ('de', 'Deutsch')], default='it', help_text="Lingua dell'interfaccia del chatbot", max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('processing_time', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='profiles.project')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=255)),
                ('file_path', models.CharField(max_length=500)),
                ('file_type', models.CharField(max_length=20)),
                ('file_size', models.BigIntegerField()),
                ('file_hash', models.CharField(max_length=64)),
                ('is_embedded', models.BooleanField(default=False)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('last_indexed_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='profiles.project')),
            ],
            options={
                'unique_together': {('project', 'file_path')},
            },
        ),
        migrations.CreateModel(
            name='ProjectIndexStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index_exists', models.BooleanField(default=False)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('documents_count', models.IntegerField(default=0)),
                ('index_hash', models.CharField(blank=True, max_length=64, null=True)),
                ('notes_hash', models.CharField(blank=True, max_length=64, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='index_status', to='profiles.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectLLMConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('max_tokens', models.IntegerField(blank=True, null=True)),
                ('timeout', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('engine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='profiles.llmengine')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='llm_config', to='profiles.project')),
            ],
            options={
                'verbose_name': 'Configurazione LLM Progetto',
                'verbose_name_plural': 'Configurazioni LLM Progetto',
            },
        ),
        migrations.CreateModel(
            name='ProjectNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255)),
                ('content', models.TextField()),
                ('is_included_in_rag', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_indexed_at', models.DateTimeField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_notes', to='profiles.project')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectPromptConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_prompt_text', models.TextField(blank=True, help_text='Prompt personalizzato specifico per questo progetto')),
                ('use_custom_prompt', models.BooleanField(default=False, help_text='Se abilitato, usa il prompt personalizzato anziché quello predefinito')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('default_system_prompt', models.ForeignKey(blank=True, help_text='Prompt di sistema predefinito selezionato', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='profiles.defaultsystemprompts')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='prompt_config', to='profiles.project')),
            ],
            options={
                'verbose_name': 'Configurazione Prompt Progetto',
                'verbose_name_plural': 'Configurazioni Prompt Progetto',
            },
        ),
        migrations.CreateModel(
            name='ProjectRAGConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_size', models.IntegerField(default=500, help_text='Lunghezza di ciascun frammento in caratteri')),
                ('chunk_overlap', models.IntegerField(default=50, help_text='Sovrapposizione fra chunk adiacenti')),
                ('similarity_top_k', models.IntegerField(default=6, help_text='Numero di frammenti più rilevanti da utilizzare')),
                ('mmr_lambda', models.FloatField(default=0.7, help_text='Bilanciamento tra rilevanza e diversità (0-1)')),
                ('similarity_threshold', models.FloatField(default=0.7, help_text='Soglia minima di similarità per includere risultati')),
                ('retriever_type', models.CharField(choices=[('mmr', 'Maximum Marginal Relevance'), ('similarity', 'Similarity Search'), ('similarity_score_threshold', 'Similarity with Threshold')], default='mmr', help_text='Strategia di ricerca per trovare frammenti rilevanti', max_length=50)),
                ('auto_citation', models.BooleanField(default=True, help_text='Includi riferimenti alle fonti nelle risposte')),
                ('prioritize_filenames', models.BooleanField(default=True, help_text='Dai priorità ai documenti con nomi menzionati nella domanda')),
                ('equal_notes_weight', models.BooleanField(default=True, help_text='Tratta note e documenti con uguale importanza')),
                ('strict_context', models.BooleanField(default=False, help_text='Risposte basate SOLO sui documenti, rifiuta di rispondere se mancano informazioni')),
                ('preset_name', models.CharField(blank=True, help_text='Nome del preset utilizzato (se applicabile)', max_length=100)),
                ('preset_category', models.CharField(choices=[('balanced', 'Bilanciato'), ('precision', 'Alta Precisione'), ('speed', 'Velocità'), ('extended_context', 'Contesto Esteso'), ('custom', 'Personalizzato')], default='balanced', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rag_config', to='profiles.project')),
            ],
            options={
                'verbose_name': 'Configurazione RAG Progetto',
                'verbose_name_plural': 'Configurazioni RAG Progetto',
            },
        ),
        migrations.CreateModel(
            name='ProjectURL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=500)),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('extracted_info', models.JSONField(blank=True, null=True)),
                ('file_path', models.CharField(blank=True, max_length=767, null=True)),
                ('crawl_depth', models.IntegerField(default=0)),
                ('is_indexed', models.BooleanField(default=False)),
                ('is_included_in_rag', models.BooleanField(default=True)),
                ('last_indexed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to='profiles.project')),
            ],
        ),
        migrations.CreateModel(
            name='AnswerSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('page_number', models.IntegerField(blank=True, null=True)),
                ('relevance_score', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='profiles.projectconversation')),
                ('project_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='used_in_answers', to='profiles.projectfile')),
                ('project_note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='used_in_answers_from_notes', to='profiles.projectnote')),
                ('project_url', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='used_in_answers_from_urls', to='profiles.projecturl')),
            ],
        ),
        migrations.CreateModel(
            name='UserAPIKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.TextField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('last_validation', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_keys', to='profiles.llmprovider')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chiave API Utente',
                'verbose_name_plural': 'Chiavi API Utente',
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_annual', models.BooleanField(default=False)),
                ('auto_renew', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('payment_status', models.CharField(choices=[('paid', 'Pagato'), ('pending', 'In attesa'), ('failed', 'Fallito'), ('canceled', 'Annullato')], default='paid', max_length=20)),
                ('current_storage_used_mb', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('current_files_count', models.IntegerField(default=0)),
                ('current_month_rag_queries', models.IntegerField(default=0)),
                ('extra_storage_charges', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('extra_queries_charges', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_usage_reset', models.DateField(blank=True, null=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subscribers', to='profiles.subscriptionplan')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='projecturl',
            index=models.Index(fields=['project', 'is_indexed'], name='profiles_pr_project_83a957_idx'),
        ),
        migrations.AddIndex(
            model_name='projecturl',
            index=models.Index(fields=['url'], name='profiles_pr_url_1b7b6e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='projecturl',
            unique_together={('project', 'url')},
        ),
        migrations.AlterUniqueTogether(
            name='userapikey',
            unique_together={('user', 'provider')},
        ),
    ]
