"""
Django settings for pvaitony troject.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import sys
from logging.handlers import RotatingFileHandler

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jx!7qd143bt%pv8uw94pux$#bpm_gqmj6ge$kb+dqk*0(t9$9%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dashboard',
    'profiles',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.gzip.GZipMiddleware',  # Activate HTML gzip compression. Used for optimizate HTML Pages
]

ROOT_URLCONF = 'vaitony_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vaitony_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


#mysql  Default DB
DATABASES = {
    'default': {
       'ENGINE': 'django.db.backends.mysql',
       'NAME': 'vaitony',
       'USER': 'root',
       'PASSWORD': 'password',
       'HOST': 'localhost',
       'PORT': '3306',
       'OPTIONS': {
           'charset': 'utf8mb4',
           'init_command': "SET sql_mode='STRICT_TRANS_TABLES', innodb_strict_mode=1, NAMES 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'",

       },
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'dashboard/templates/adminlte'),
    os.path.join(BASE_DIR, 'static'),
]

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



#################### REDIRECT CONFIGURATION OF PAGES
# Redirect to home URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = '/dashboard'
LOGIN_URL = '/profiles/login/'
LOGOUT_REDIRECT_URL = 'login'



##################### Email Server Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'   #Activate Django sending email
DEFAULT_FROM_EMAIL = ''
#SERVER_EMAIL = ''
EMAIL_HOST = ''
EMAIL_PORT = 587
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_TLS = True


##################### Gzip Configuration optimization
GZIP_CONTENT_TYPES = [
    'text/html',
    'text/css',
    'application/javascript',
    'application/json',
    'application/xml',
    'image/svg+xml',
]
# Compression Level
GZIP_LEVEL = 6  # From 1 to 9. 9 is the maximum compression level. NOTE: gzip optimization must be enabled even in
                # apache (or nginx) configuration



##################### media root
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



PUBLIC_SITE_URL = ''



# set maximum value for a database table id key to an integer of 64 bit (in case this app is used a lot)
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



##################### RESTFRAMWORK Pagination
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}








# Logging Configuration
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {message}',
#             'style': '{',
#         },
#         'simple': {
#             'format': '{levelname} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs/vaitony.log'),
#             'maxBytes': 1024*1024*5,
#             'backupCount': 5,
#             'formatter': 'verbose',
#         },
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple',
#         },
#     },
#     'loggers': {
#         # Logger django principale - solo ERROR in console
#         'django': {
#             'handlers': ['file', 'console'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         # Logger per le tue app - tutti i livelli in console
#         'profiles': {
#             'handlers': ['file', 'console'],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#         'dashboard': {
#             'handlers': ['file', 'console'],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#         # Limita il log di autoreload
#         'django.utils.autoreload': {
#             'handlers': ['file'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         # Limita i log di accesso
#         'django.server': {
#             'handlers': ['file'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         # Limita i log delle query SQL
#         'django.db.backends': {
#             'handlers': ['file'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#     },
# }



# Configurazione avanzata dei log per Django


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {module} {process:d} {thread:d} - {message}',
            'style': '{',
        },
        'detailed': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        # Console handler per lo sviluppo
        'console': {
            'level': 'DEBUG',  # Hai già impostato questo a DEBUG, che è corretto
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        # Qui potresti aggiungere altri handler come 'file' se necessario
    },
    'loggers': {
        # Aggiungi i logger per le tue app qui
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'dashboard': {  # Aggiungi questo per l'app dashboard
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'profiles': {  # Aggiungi questo per l'app profiles
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # Aggiungi qui altri logger se necessario
    }
}


############################################################
###### This part below MUST be at the end of the file ######
############################################################
try:
    from . local_settings import *
    print('IMPORTED LOCAL SETTINGS')
except ImportError:
    pass

try:
    from . production_settings import *
    print('IMPORTED PRODUCTION SETTINGS')
except ImportError:
    pass
############################################################
############################################################

