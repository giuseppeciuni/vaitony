# Generated by Django 5.1.1 on 2025-04-26 11:27

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('profiles', '0017_projectconfiguration'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DefaultSystemPrompts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('prompt_text', models.TextField()),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Prompt di Sistema Predefinito',
                'verbose_name_plural': 'Prompt di Sistema Predefiniti',
            },
        ),
        migrations.CreateModel(
            name='LLMProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('api_url', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='llm_logos/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Provider LLM',
                'verbose_name_plural': 'Provider LLM',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('price_monthly', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_yearly', models.DecimalField(decimal_places=2, max_digits=10)),
                ('storage_limit_mb', models.IntegerField(help_text='Limite di archiviazione in MB')),
                ('max_files', models.IntegerField(help_text='Numero massimo di file')),
                ('monthly_rag_queries', models.IntegerField(help_text='Numero di query RAG mensili incluse')),
                ('extra_storage_price_per_mb', models.DecimalField(decimal_places=4, max_digits=10)),
                ('extra_rag_query_price', models.DecimalField(decimal_places=4, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name='projectconfiguration',
            options={'verbose_name': 'Configurazione Progetto', 'verbose_name_plural': 'Configurazioni Progetto'},
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='claude_max_tokens',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='claude_model',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='claude_timeout',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='deepseek_max_tokens',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='deepseek_model',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='deepseek_timeout',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='gemini_max_tokens',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='gemini_model',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='gemini_timeout',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='gpt_max_tokens',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='gpt_model',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='gpt_timeout',
        ),
        migrations.RemoveField(
            model_name='projectconfiguration',
            name='selected_engine',
        ),
        migrations.AlterField(
            model_name='projectconfiguration',
            name='project',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='project_config', to='profiles.project'),
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('billing_period_start', models.DateField()),
                ('billing_period_end', models.DateField()),
                ('invoice_date', models.DateField()),
                ('due_date', models.DateField()),
                ('base_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('storage_extra_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('queries_extra_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('draft', 'Bozza'), ('pending', 'In attesa'), ('paid', 'Pagata'), ('overdue', 'Scaduta'), ('cancelled', 'Annullata')], default='draft', max_length=20)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('invoice_number', models.CharField(max_length=50, unique=True)),
                ('total_storage_used_mb', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_files_count', models.IntegerField()),
                ('total_rag_queries', models.IntegerField()),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Fattura',
                'verbose_name_plural': 'Fatture',
                'ordering': ['-invoice_date'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=4, max_digits=10)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('item_type', models.CharField(choices=[('subscription', 'Abbonamento'), ('storage', 'Storage Extra'), ('queries', 'Query RAG Extra'), ('setup', 'Costo di Setup'), ('discount', 'Sconto'), ('tax', 'Tasse')], max_length=30)),
                ('details', models.JSONField(blank=True, null=True)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='profiles.invoice')),
            ],
        ),
        migrations.CreateModel(
            name='LLMEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_id', models.CharField(help_text='Identificativo del modello usato nelle API', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('default_temperature', models.FloatField(default=0.7)),
                ('default_max_tokens', models.IntegerField(default=4096)),
                ('default_timeout', models.IntegerField(default=60, help_text='Timeout in secondi')),
                ('supports_vision', models.BooleanField(default=False, help_text="Il modello supporta l'analisi di immagini")),
                ('supports_functions', models.BooleanField(default=False, help_text='Il modello supporta le chiamate a funzioni')),
                ('context_window', models.IntegerField(default=8192, help_text='Dimensione massima del contesto in token')),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engines', to='profiles.llmprovider')),
            ],
            options={
                'verbose_name': 'Motore LLM',
                'verbose_name_plural': 'Motori LLM',
                'ordering': ['provider__name', 'name'],
                'unique_together': {('provider', 'model_id')},
            },
        ),
        migrations.CreateModel(
            name='LLMUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_tokens', models.IntegerField(default=0)),
                ('output_tokens', models.IntegerField(default=0)),
                ('processing_time', models.FloatField(help_text='Tempo di elaborazione in secondi')),
                ('is_success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('prompt_hash', models.CharField(blank=True, max_length=64, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('engine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='profiles.llmengine')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='llm_usage', to='profiles.project')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='profiles.llmprovider')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='llm_usage', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log Utilizzo LLM',
                'verbose_name_plural': 'Log Utilizzo LLM',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectLLMConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('max_tokens', models.IntegerField(blank=True, null=True)),
                ('timeout', models.IntegerField(blank=True, null=True)),
                ('system_prompt', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('engine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='profiles.llmengine')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='llm_config', to='profiles.project')),
            ],
            options={
                'verbose_name': 'Configurazione LLM Progetto',
                'verbose_name_plural': 'Configurazioni LLM Progetto',
            },
        ),
        migrations.CreateModel(
            name='RAGQueryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_text', models.TextField()),
                ('query_timestamp', models.DateTimeField(auto_now_add=True)),
                ('query_complexity', models.CharField(choices=[('simple', 'Semplice'), ('medium', 'Media'), ('complex', 'Complessa')], default='medium', max_length=20)),
                ('documents_searched', models.IntegerField()),
                ('total_context_size_tokens', models.IntegerField()),
                ('embedding_tokens_used', models.IntegerField()),
                ('llm_input_tokens', models.IntegerField()),
                ('llm_output_tokens', models.IntegerField()),
                ('processing_time_seconds', models.FloatField()),
                ('search_time_seconds', models.FloatField()),
                ('llm_time_seconds', models.FloatField()),
                ('is_billable', models.BooleanField(default=True)),
                ('billed_amount', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('llm_engine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='profiles.llmengine')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rag_queries', to='profiles.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rag_queries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log Query RAG',
                'verbose_name_plural': 'Log Query RAG',
            },
        ),
        migrations.CreateModel(
            name='StorageUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('operation', models.CharField(choices=[('add_file', 'Aggiunta file'), ('delete_file', 'Rimozione file'), ('update_file', 'Aggiornamento file'), ('add_project', 'Creazione progetto'), ('delete_project', 'Eliminazione progetto')], max_length=20)),
                ('files_count_delta', models.IntegerField(default=0)),
                ('storage_bytes_delta', models.BigIntegerField(default=0)),
                ('details', models.JSONField(blank=True, null=True)),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='profiles.projectfile')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='profiles.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log Utilizzo Storage',
                'verbose_name_plural': 'Log Utilizzo Storage',
            },
        ),
        migrations.CreateModel(
            name='UserAPIKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.TextField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('last_validation', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_keys', to='profiles.llmprovider')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chiave API Utente',
                'verbose_name_plural': 'Chiavi API Utente',
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_annual', models.BooleanField(default=False)),
                ('auto_renew', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('payment_status', models.CharField(choices=[('paid', 'Pagato'), ('pending', 'In attesa'), ('failed', 'Fallito'), ('canceled', 'Annullato')], default='paid', max_length=20)),
                ('current_storage_used_mb', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('current_files_count', models.IntegerField(default=0)),
                ('current_month_rag_queries', models.IntegerField(default=0)),
                ('extra_storage_charges', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('extra_queries_charges', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_usage_reset', models.DateField(blank=True, null=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subscribers', to='profiles.subscriptionplan')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='invoice',
            name='subscription',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='profiles.usersubscription'),
        ),
        migrations.DeleteModel(
            name='AIEngineSettings',
        ),
        migrations.AddIndex(
            model_name='llmusagelog',
            index=models.Index(fields=['user', 'created_at'], name='profiles_ll_user_id_8e9b15_idx'),
        ),
        migrations.AddIndex(
            model_name='llmusagelog',
            index=models.Index(fields=['project', 'created_at'], name='profiles_ll_project_1b07b5_idx'),
        ),
        migrations.AddIndex(
            model_name='llmusagelog',
            index=models.Index(fields=['provider', 'created_at'], name='profiles_ll_provide_cb96bd_idx'),
        ),
        migrations.AddIndex(
            model_name='ragquerylog',
            index=models.Index(fields=['user', 'query_timestamp'], name='profiles_ra_user_id_a738c4_idx'),
        ),
        migrations.AddIndex(
            model_name='ragquerylog',
            index=models.Index(fields=['project', 'query_timestamp'], name='profiles_ra_project_645515_idx'),
        ),
        migrations.AddIndex(
            model_name='storageusagelog',
            index=models.Index(fields=['user', 'timestamp'], name='profiles_st_user_id_02059d_idx'),
        ),
        migrations.AddIndex(
            model_name='storageusagelog',
            index=models.Index(fields=['operation', 'timestamp'], name='profiles_st_operati_8d5f38_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userapikey',
            unique_together={('user', 'provider')},
        ),
    ]
